from matrix import Matrix, inverse
from vector import Vector, VectorType
from fd import fd
from typing import List


class Basis:
    """
    The basis of a linear subspace

    Attributes:
        elements (List[Vector]): The basis' vectors
        matrix (Matrix): A matrix whose columns are the basis' vectors
    """
    def __init__(self, *vectors: List[VectorType]):
        """
        Parameters:
            *vectors (List[Vector]): The basis' vectors
        """
        assert(all([len(v) == len(vectors[0]) for v in vectors]))
        assert(Matrix(vectors).determinant() != 0)
        self.elements = [v if type(v) is Vector else Vector(v) for v in vectors]

    @property
    def matrix(self) -> Matrix:
        """Returns the basis' matrix"""
        return Matrix(cols=self.elements)

    def get_subspace(self):
        """Returns the subspace generated by the basis"""
        return fd["Subspace"](*self.elements)

    def to_coords(self, vector: VectorType) -> Vector:
        """Converts a vectors coordinates from canonical to this basis'"""
        assert(self.matrix.determinant() != 0)
        return inverse(self.matrix) @ vector

    def from_coords(self, vector: VectorType) -> Vector:
        """Converts a vectors coordinates from this basis' to canonical"""
        return self.matrix @ vector

    def __repr__(self) -> str:
        """Returns a representation of the basis"""
        return '{' + ", ".join([str(b) for b in self.elements]) + '}'

    @staticmethod
    def cob_matrix(frm, to):
        """Returns a Change of Basis matrix from basis 'frm' to basis 'to'"""
        return Matrix(cols=[to.to_coords(v) for v in frm.elements])

    @staticmethod
    def canonical_basis(dim):
        """Returns the canonical basis for dimension dim"""
        return Basis(*[Vector([1 if j == i else 0 for j in range(dim)]) for i in range(dim)])


fd["Basis"] = Basis

E = Basis([1, 0, 0], [0, 1, 0], [0, 0, 1])
b1 = Basis([1, 0, 0], [1, 1, 0], [1, 1, 1])
b2 = Basis([1, 1, 1], [0, 1, 1], [0, 1, 0])
b3 = Basis([1, 2, 3], [3, 2, 1], [0, 1, 0])
